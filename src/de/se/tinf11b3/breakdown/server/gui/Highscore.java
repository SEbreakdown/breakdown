package de.se.tinf11b3.breakdown.server.gui;

import gherkin.deps.net.iharder.Base64.OutputStream;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileOutputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;

import org.jboss.netty.handler.queue.BufferedWriteHandler;

import com.google.gwt.i18n.server.MessageCatalogFactory.Writer;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Window.Notification;

import de.se.tinf11b3.breakdown.server.DateiReader;

public class Highscore extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	
	private AbsoluteLayout mainLayout;
	private VerticalLayout verticalLayout_1;
	private Button button_hauptmenue;
	private Button button_highscore;
	private Table table_1;
	private Hauptmenue hauptmenue;
	private ArrayList<String> arrayListZeileninhalt;
	private String[] arrayZeileninhalt;
	private int[] arrayPunkte;
	private ArrayList<String> arrayListName;
	private String zeile;
	private String dateiname= "/Highscore.txt";
	private File file;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public Highscore(final Hauptmenue hauptmenue) {
		this.hauptmenue = hauptmenue;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		    
		button_hauptmenue.addListener(new ClickListener() {
			public void buttonClick(ClickEvent event) {
				getWindow().setContent(hauptmenue);
			}
		});
		
		button_highscore.addListener(new ClickListener() {
			public void buttonClick(ClickEvent event) {
				//inHighscoreEintragen(490, "Dennis");
				System.out.println("funktioniert noch nicht");
			}
		});
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// verticalLayout_1
		verticalLayout_1 = buildVerticalLayout_1();
		mainLayout.addComponent(verticalLayout_1, "top:7.5%;left:7.5%;");
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("400px");
		verticalLayout_1.setHeight("500px");
		verticalLayout_1.setMargin(false);
		
		
		//table_1
		table_1 = new Table();
		table_1.setImmediate(false);
		table_1.setWidth("-1px");
		table_1.setHeight("-1px");
		table_1.addContainerProperty("Punkte", String.class, null);
		table_1.addContainerProperty("Name", String.class,  null);
		highscoreAuslesen();
		for (int i=0; i<5; i++){
			table_1.addItem(new Object[] {arrayPunkte[i],arrayListName.get(i)}, new Integer(i));
		}
		verticalLayout_1.addComponent(table_1);
				
		
		
		// button_hauptmenue
		button_hauptmenue = new Button();
		button_hauptmenue.setCaption("zurueck zum Hauptmenue");
		button_hauptmenue.setImmediate(true);
		button_hauptmenue.setWidth("200px");
		button_hauptmenue.setHeight("-1px");
		verticalLayout_1.addComponent(button_hauptmenue);		
		
		button_highscore = new Button();
		button_highscore.setCaption("Highscore");
		button_highscore.setImmediate(true);
		button_highscore.setWidth("200px");
		button_highscore.setHeight("-1px");
		verticalLayout_1.addComponent(button_highscore);
		
		
		return verticalLayout_1;
	}
	
	// liest die aktuelle Highscoreliste und erstellt Array fÃ¼r Punkte und Name
	public void highscoreAuslesen(){
		openfile();
		speicherePunkteNamen();
	}

	//erstellt Arraylist (mit den Zeilen)
	public void openfile(){
		try {
			FileInputStream fis = new FileInputStream("/tmp/highscore.txt");
			Reader filereader = new InputStreamReader(fis, "UTF-8"); 
			
			BufferedReader reader = new BufferedReader(filereader);
			zeile = null;
			arrayListZeileninhalt = new ArrayList<String>();
			arrayListName = new ArrayList<String>();
			while ((zeile = reader.readLine()) != null)
			{
				arrayListZeileninhalt.add(zeile);			
			}
			reader.close();
		}
		catch(IOException ex) {
			ex.printStackTrace();
		}
	}
	
	//erstellt eine ArrayList mit den Punkten und eine mit den Namen
	public void speicherePunkteNamen(){
		arrayZeileninhalt = new String[5];
		arrayPunkte = new int[5];
		for(int i = 0; i < 5; i++)
		{
			String wort = arrayListZeileninhalt.get(i);
			char[] wortArray = wort.toCharArray();
			int stelleDesBuchstaben = getCharPositions(wortArray, ' ');
			int punkte = 0;
			String name = "";
			for(int k = 0; k < stelleDesBuchstaben; k++)
			{
				punkte = (int) (punkte + (Integer.valueOf(String.valueOf((wortArray[k]))) * Math.pow(10, (stelleDesBuchstaben - k - 1))));
			}
			for(int k = stelleDesBuchstaben + 1; k < wortArray.length; k++){
				name = name + wortArray[k];
			}
			arrayPunkte[i]=punkte;
			arrayListName.add(name);
		}
		for(int i=0; i<arrayListName.size(); i++){
			System.out.println(arrayListName.get(i));
		}
	}

	/*
	public void inHighscoreEintragen(int punkte, String name){
		int stelle = 10;
		for (int i=0; i<5; i++){
			if ( punkte > arrayPunkte[i] ){
				stelle = i;
				break;
			}
		}
		if (stelle < 10)
		{
			for (int j=4;j>stelle;j--){
				arrayPunkte[j]=arrayPunkte[j-1];
				arrayListName.set(j, arrayListName.get(j-1));
			}
			arrayPunkte[stelle]=punkte;
			arrayListName.set(stelle, name);



			try {
				
				//so wird eingelesen
				//InputStream stream = this.getClass().getResourceAsStream(dateiname);
				//Reader filereader = new InputStreamReader(stream, "ISO-8859-1");
				//BufferedReader reader = new BufferedReader(filereader);
				//OutputStream
				//OutputStreamWriter
				//BufferedWriter
				
				

                file = new File(dateiname);
                FileOutputStream fos = new FileOutputStream(file);
                Writer filewriter = new OutputStreamWriter(fos, "ISO-8859-1");
                    
				

				
				//FileWriter fw = new FileWriter(dateiname);
			    //PrintWriter pw = new PrintWriter( fw );
			    for (int i = 0; i < 5; i++)
			    {
			    	//pw.println(arrayPunkte[i] + " " + arrayListName.get(i));
			    	System.out.println("test");
			    }
				//fw.flush();
				//fw.close();
				//pw.flush();
				//pw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		table_1.removeAllItems();
		for (int i=0; i<5; i++){
			table_1.addItem(new Object[] {arrayPunkte[i],arrayListName.get(i)}, new Integer(i));
		}
	}
	*/

	public int getCharPositions(char[] wort, char c )
	{
		for(int i = 0; i < wort.length; i++){
			if(wort[i] == c)
			{
				return i;
			}
		}
		return 0;
	}

}