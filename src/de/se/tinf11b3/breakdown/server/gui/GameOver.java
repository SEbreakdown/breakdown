package de.se.tinf11b3.breakdown.server.gui;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Validator.InvalidValueException;
import com.vaadin.data.validator.RegexpValidator;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;

import de.se.tinf11b3.breakdown.server.highscore.HighscoreEntry;
import de.se.tinf11b3.breakdown.server.spielverwaltung.Spielverwaltung;

public class GameOver extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private Button button_send;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;
	@AutoGenerated
	private TextField textField_1;
	@AutoGenerated
	private Label label_name;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private Label label_pkt;
	@AutoGenerated
	private Label label_points;
	@AutoGenerated
	private Label label_gameOver;
	
	private Spielverwaltung spielverwaltung;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @param spielverwaltung 
	 */
	public GameOver(final Spielverwaltung spielverwaltung, int punkte) {
		this.spielverwaltung = spielverwaltung;
		
		buildMainLayout();
		setCompositionRoot(mainLayout);

		
		label_pkt.setValue(punkte+" Punkte erreicht");
		button_send.setClickShortcut(KeyCode.ENTER);
		
		button_send.addListener(new ClickListener() {
			
			public void buttonClick(ClickEvent event) {
				
				RegexpValidator validator = new RegexpValidator("[a-zA-Z_0-9^//p{blank}]+", true,"Bitte nur Buchstaben und Zahlen verwenden");
				try{
					validator.validate(textField_1.getValue());
					spielverwaltung.getHighscorehandler().addEntry(new HighscoreEntry(spielverwaltung.getHighscore(),(String)textField_1.getValue()));
					spielverwaltung.showHighscoreWindow();
				}
				catch( InvalidValueException e){
					spielverwaltung.getMainWindow().showNotification("Bitte nur Buchstaben und Zahlen verwenden ohne Leerzeichen");
					textField_1.setValue("");
				}
				
				
			}
		});
		
		// TODO add user code here
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// label_gameOver
		label_gameOver = new Label();
		label_gameOver.setImmediate(false);
		label_gameOver.setWidth("-1px");
		label_gameOver.setHeight("-1px");
		label_gameOver.setValue("GAME OVER");
		mainLayout.addComponent(label_gameOver, "top:10.0%;left:20.0%;");
		
		// verticalLayout_1
		verticalLayout_1 = buildVerticalLayout_1();
		mainLayout.addComponent(verticalLayout_1, "top:120.0px;left:103.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("300px");
		verticalLayout_1.setHeight("-1px");
		verticalLayout_1.setMargin(false);
		verticalLayout_1.setSpacing(true);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		verticalLayout_1.addComponent(horizontalLayout_1);
		
		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		verticalLayout_1.addComponent(horizontalLayout_2);
		
		// button_send
		button_send = new Button();
		button_send.setCaption("Send");
		button_send.setImmediate(true);
		button_send.setWidth("100.0%");
		button_send.setHeight("-1px");
		verticalLayout_1.addComponent(button_send);
		
		return verticalLayout_1;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("100.0%");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		
		// label_points
		label_points = new Label();
		label_points.setImmediate(false);
		label_points.setWidth("-1px");
		label_points.setHeight("-1px");
		label_points.setValue("Erreichte Punktzahl:");
		horizontalLayout_1.addComponent(label_points);
		
		// label_pkt
		label_pkt = new Label();
		label_pkt.setImmediate(false);
		label_pkt.setWidth("-1px");
		label_pkt.setHeight("-1px");
		label_pkt.setValue("XXXX Punkte");
		horizontalLayout_1.addComponent(label_pkt);
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("100.0%");
		horizontalLayout_2.setHeight("-1px");
		horizontalLayout_2.setMargin(false);
		
		// label_name
		label_name = new Label();
		label_name.setImmediate(false);
		label_name.setWidth("-1px");
		label_name.setHeight("-1px");
		label_name.setValue("Name");
		horizontalLayout_2.addComponent(label_name);
		
		// textField_1
		textField_1 = new TextField();
		textField_1.setImmediate(false);
		textField_1.setWidth("-1px");
		textField_1.setHeight("-1px");
		horizontalLayout_2.addComponent(textField_1);
		
		return horizontalLayout_2;
	}

}
